package string_practice;

import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.util.ArrayDeque;
import java.util.Scanner;

public class escape {
	static char[][] Board;
	static int[] dx = {-1, 0, +1, 0};
	static int[] dy = {0, +1, 0, -1};
	static boolean[][] visitedRed;
	static boolean[][] visitedBlue;
	
	public static void main(String[] args) throws FileNotFoundException{
		System.setIn(new FileInputStream("src/input.txt"));
		Scanner sc = new Scanner(System.in);
		int T = sc.nextInt();
		for (int t = 0; t < T; t++) {
			int n = sc.nextInt();
			int m = sc.nextInt();
			Board = new char[n][m];
			Point red = null;
			Point blue = null;
			Point goal = null;
			for (int i = 0; i < n; i++){
				String N = sc.next();
				for (int j = 0; j < N.length(); j++) {
					Board[i][j] = N.charAt(j);
					if(Board[i][j] == 'R')
					{
						red = new Point(i, j);
					}
					if(Board[i][j] == 'B')
					{
						blue = new Point(i, j);
					}
					if(Board[i][j] == 'O')
					{
						goal = new Point(i, j);
					}
				}
			}	
			ArrayDeque<State> open = new ArrayDeque<>();
			State start = new State();
			start.red = red; //3,1
			start.blue = blue; //1,4
			int answer = -1;
			open.add(start); //red,blue모두 넣어줌.
			visitedRed = new boolean[n][m];
			visitedBlue = new boolean[n][m];
			
			
			while(!open.isEmpty()){
				State current = open.poll();
				if(current.visited())
					continue;
				visitedRed[current.red.x][current.red.y] = true;
				visitedBlue[current.blue.x][current.blue.y] = true;
				System.out.println("Red "+current.red.x+","+current.red.y);
				System.out.println("Blue "+current.blue.x+","+current.blue.y);
				System.out.println(current.depth);
				if (current.blue.goalTest(goal)){
					continue;
				}
				if (current.red.goalTest(goal)){
					answer = current.depth;
					break;
				}
				for (int i=0; i<4; i++){
					State child = new State();
					child.depth = current.depth+1;
					Point first = current.getHighPrioirtyPoint(i);
					if(first!=blue){
						child.red = current.red.nextPoint(i);
						child.blue = current.blue.nextPoint(i, child.red);
						System.out.println("red first");
					}
					else{
						child.blue = current.blue.nextPoint(i);
						child.red = current.red.nextPoint(i, child.blue);
						System.out.println("blue first");
					}
					open.add(child);
				}
			}
			System.out.printf("#%d %d%n", t+1, answer);
		}
	}
	static class State{
		public Point red, blue;
		public int depth;
		public boolean visited(){
			return visitedRed[red.x][red.y] && visitedBlue[blue.x][blue.y];
		}
		public Point getHighPrioirtyPoint(int index){
			if(index == 0){
				return red.x < blue.x ? red : blue;
			}else if(index == 1){
				return red.y > blue.y ? red : blue;
			}else if(index == 2){
				return red.x > blue.x ? red : blue;
			}else{
				return red.y < blue.y ? red : blue;
			}
		}
	}
	static class Point{
		public int x,y;
		public Point(int x, int y) {
			super();
			this.x = x;
			this.y = y;
		}
		public boolean goalTest(Point other){
			return x == other.x && y == other.y;
		}
		public boolean valid(){
			return Board[x][y] != '#';
		}
		public Point nextPoint(int index){
			int nextX = x+dx[index];
			int nextY = y+dy[index];
			while (Board[nextX][nextY] != '#'){
				if (Board[nextX][nextY] == 'O')
					return new Point(nextX, nextY);
				nextX = nextX+dx[index];
				nextY = nextY+dy[index];
			}
			return new Point(nextX-dx[index], nextY-dy[index]);
		}
		public Point nextPoint(int index, Point other){
			int nextX = x+dx[index];
			int nextY = y+dy[index];
			while (Board[nextX][nextY] != '#'){
				if (Board[nextX][nextY] == 'O')
					return new Point(nextX, nextY);
				if (nextX == other.x && nextY == other.y)
					return new Point(nextX-dx[index], nextY-dy[index]);
				nextX = nextX+dx[index];
				nextY = nextY+dy[index];
			}
			return new Point(nextX-dx[index], nextY-dy[index]);
		}
	}
}
